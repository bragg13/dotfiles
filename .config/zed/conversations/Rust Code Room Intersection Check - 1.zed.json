{"id":"4ab83d8c-323d-47c7-8c44-35c6b6e7c718","zed":"context","version":"0.4.0","text":"\n\n\n\n```rs kerogueli/src/map.rs:63-77\n// Excerpt from: pub fn new_map_rooms_and_corridors\npub fn new_map_rooms_and_corridors() -> (Vec<TileType>, Vec<Rect>) {\n    let mut map = vec![TileType::Water; 80 * 50];\n    let mut rooms: Vec<Rect> = Vec::new();\n    const MAX_ROOMS: i32 = 16;\n\n    let mut rng = rltk::RandomNumberGenerator::new();\n    for _ in 0..MAX_ROOMS {\n        add_room(&mut map, &mut rooms);\n        let mut ok = true;\n        for other_room in rooms {\n            if new_room.intersect(other_room) {\n                ok = false;\n            }\n        }\n\n```\nwouldi use `for other_room in rooms` or `for other_room in &rooms` ?\n\nIn Rust, when you iterate over a collection using `for item in collection`, you are consuming the collection, which means that the collection will be moved into the loop and you won't be able to use it afterwards. If you want to iterate over the collection without consuming it, you should use a reference to the collection, i.e., `for item in &collection`.\n\nIn your case, you should use `for other_room in &rooms` to iterate over the rooms without consuming the `rooms` vector. This way, you can continue to use `rooms` after the loop. Here is the corrected code:\n\n```rust\npub fn new_map_rooms_and_corridors() -> (Vec<TileType>, Vec<Rect>) {\n    let mut map = vec![TileType::Water; 80 * 50];\n    let mut rooms: Vec<Rect> = Vec::new();\n    const MAX_ROOMS: i32 = 16;\n\n    let mut rng = rltk::RandomNumberGenerator::new();\n    for _ in 0..MAX_ROOMS {\n        add_room(&mut map, &mut rooms);\n        let mut ok = true;\n        for other_room in &rooms {\n            if new_room.intersect(other_room) {\n                ok = false;\n            }\n        }\n        // Additional logic to handle the room creation and intersection check\n    }\n\n    (map, rooms)\n}\n```\n\nNote that `new_room` should be defined and added to the `rooms` vector after the intersection check. The `add_room` function should also be properly defined to add new rooms to the `rooms` vector.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":39}}},{"id":{"replica_id":0,"value":30},"start":641,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":40}}},{"id":{"replica_id":0,"value":31},"start":2000,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":41}}}],"summary":"Rust Code Room Intersection Check","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null}]}